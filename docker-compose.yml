services:
  # -----------------------------
  # Trafik Reverse Proxy Service
  # -----------------------------
  traefik:
    image: traefik:v2.9
    container_name: traefik
    command:
      - --api.insecure=true
      - --api.dashboard=true
      - --providers.docker=true
      - "--providers.docker.exposedbydefault=false"
      - --entryPoints.web.address=:80
      - --entryPoints.websecure.address=:443
      - "--certificatesresolvers.myresolver.acme.httpchallenge=true"
      - "--certificatesresolvers.myresolver.acme.httpchallenge.entrypoint=web"
      - --certificatesResolvers.myresolver.acme.tlsChallenge=true
      - --certificatesResolvers.myresolver.acme.email=balo88326@gmail.com
      - --certificatesResolvers.myresolver.acme.storage=/letsencrypt/acme.json
    expose:
      - "8080"
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - ./letsencrypt:/letsencrypt

  # -----------------------------
  # Redis Queue
  # -----------------------------
  redis-queue:
    image: redis:latest
    container_name: redis-queue
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data

  # -----------------------------
  # Auth API
  # -----------------------------
  auth-api:
    build:
      context: ./auth-api
      dockerfile: Dockerfile
    container_name: auth-api
    environment:
      - AUTH_API_PORT=${AUTH_API_PORT}
      - JWT_SECRET=${JWT_SECRET}
      - USERS_API_ADDRESS=${USERS_API_ADDRESS}
    # ports:
    #   - "${AUTH_API_PORT}:8081"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.auth-api.rule=Host(`auth.${HOST_NAME}`) || Host(`${HOST_NAME}`) && PathPrefix(`/api/auth`)"
      - "traefik.http.routers.auth-api.entrypoints=web"
      - "traefik.http.routers.auth-api.tls.certresolver=myresolver"
    depends_on:
      - users-api

  # -----------------------------
  # Users API
  # -----------------------------
  users-api:
    build:
      context: ./users-api
      dockerfile: Dockerfile
    container_name: users-api
    environment:
      - SERVER_PORT=${SERVER_PORT}
      - JWT_SECRET=${JWT_SECRET}
    # ports:
    #   - "${SERVER_PORT}:8083"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.users-api.rule=Host(`users.${HOST_NAME}`) || Host(`${HOST_NAME}`) && PathPrefix(`/api/users`)"
      - "traefik.http.routers.users-api.entrypoints=websecure"
      - "traefik.http.routers.users-api.tls.certresolver=myresolver"
    depends_on:
      - redis-queue

  # -----------------------------
  # Todos API
  # -----------------------------
  todos-api:
    build:
      context: ./todos-api
      dockerfile: Dockerfile
    container_name: todos-api
    environment:
      - JWT_SECRET=${JWT_SECRET}
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CHANNEL=${REDIS_CHANNEL}
    # ports:
    #   - "8082:8082"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.todos-api.rule=Host(`todos.${HOST_NAME}`) || Host(`${HOST_NAME}`) && PathPrefix(`/api/todos`)"
      - "traefik.http.routers.todos-api.entrypoints=websecure"
      - "traefik.http.routers.todos-api.tls.certresolver=myresolver"
    depends_on:
      - redis-queue
      - auth-api

  # -----------------------------
  # Log Message Processor
  # -----------------------------
  log-message-processor:
    build:
      context: ./log-message-processor
      dockerfile: Dockerfile
    container_name: log-message-processor
    environment:
      - REDIS_HOST=${REDIS_HOST}
      - REDIS_PORT=${REDIS_PORT}
      - REDIS_CHANNEL=${REDIS_CHANNEL}
    depends_on:
      - redis-queue

  # -----------------------------
  # Frontend
  # -----------------------------
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    container_name: frontend
    environment:
      - PORT=${PORT}
      - AUTH_API_ADDRESS=${AUTH_API_ADDRESS}
      - TODOS_API_ADDRESS=${TODOS_API_ADDRESS}
    ports:
      - "8080:8080"
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.frontend.rule=Host(`${HOST_NAME}`)"
      - "traefik.http.routers.frontend.entrypoints=web"
      - "traefik.http.routers.frontend-http.service=frontend"
      - "traefik.http.routers.frontend.tls.certresolver=myresolver"
      - "traefik.http.services.frontend.loadbalancer.server.port=8080"
      # tls
      - "traefik.http.routers.frontend-https.tls=true"
      - "traefik.http.routers.frontend-https.tls.certresolver=myresolver"
      - "traefik.http.routers.frontend-https.entrypoints=websecure"
      - "traefik.http.routers.frontend-https.rule=Host(`prestastack.com`)"
      - "traefik.http.routers.frontend-https.service=frontend"
      # tls redirect
      - "traefik.http.routers.frontend-http.middlewares=redirect-https"
      - "traefik.http.middlewares.redirect-https.redirectScheme.scheme=https"
      - "traefik.http.middlewares.redirect-https.redirectScheme.permanent=true"
    volumes:
      - ./frontend:/app
      - /app/node_modules

    depends_on:
      - auth-api
      - todos-api

volumes:
  redis_data:
